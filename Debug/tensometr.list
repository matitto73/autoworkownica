
tensometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003744  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08003850  08003850  00004850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004048  08004048  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004048  08004048  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004048  08004048  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004048  08004048  00005048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800404c  0800404c  0000504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004050  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000068  080040b8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  080040b8  0000668c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b907  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  00011998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00013680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b4bb  00000000  00000000  00014398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ed57  00000000  00000000  0002f853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b644  00000000  00000000  0003e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c9bee  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a35  00000000  00000000  000c9c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d0c  00000000  00000000  000ca668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ce374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003838 	.word	0x08003838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003838 	.word	0x08003838

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <microDelay>:
float knownOriginal = 1500000;  // in milli gram
float knownHX711 = 31200;
int weight;

void microDelay(uint16_t delay)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <microDelay+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <microDelay+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <microDelay+0x14>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	200000d8 	.word	0x200000d8

08000684 <getHX711>:

int32_t getHX711(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800068e:	f000 fdf1 	bl	8001274 <HAL_GetTick>
 8000692:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000694:	e008      	b.n	80006a8 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8000696:	f000 fded 	bl	8001274 <HAL_GetTick>
 800069a:	4602      	mov	r2, r0
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80006a2:	d901      	bls.n	80006a8 <getHX711+0x24>
      return 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	e04b      	b.n	8000740 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 80006a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ac:	4826      	ldr	r0, [pc, #152]	@ (8000748 <getHX711+0xc4>)
 80006ae:	f001 f877 	bl	80017a0 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d0ee      	beq.n	8000696 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	72fb      	strb	r3, [r7, #11]
 80006bc:	e025      	b.n	800070a <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c4:	4820      	ldr	r0, [pc, #128]	@ (8000748 <getHX711+0xc4>)
 80006c6:	f001 f882 	bl	80017ce <HAL_GPIO_WritePin>
    microDelay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ffc2 	bl	8000654 <microDelay>
    data = data << 1;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006dc:	481a      	ldr	r0, [pc, #104]	@ (8000748 <getHX711+0xc4>)
 80006de:	f001 f876 	bl	80017ce <HAL_GPIO_WritePin>
    microDelay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ffb6 	bl	8000654 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 80006e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ec:	4816      	ldr	r0, [pc, #88]	@ (8000748 <getHX711+0xc4>)
 80006ee:	f001 f857 	bl	80017a0 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d102      	bne.n	80006fe <getHX711+0x7a>
      data ++;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80006fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	3301      	adds	r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	72fb      	strb	r3, [r7, #11]
 800070a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800070e:	2b17      	cmp	r3, #23
 8000710:	ddd5      	ble.n	80006be <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000718:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	4809      	ldr	r0, [pc, #36]	@ (8000748 <getHX711+0xc4>)
 8000722:	f001 f854 	bl	80017ce <HAL_GPIO_WritePin>
  microDelay(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ff94 	bl	8000654 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <getHX711+0xc4>)
 8000734:	f001 f84b 	bl	80017ce <HAL_GPIO_WritePin>
  microDelay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff8b 	bl	8000654 <microDelay>
  return data;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40010c00 	.word	0x40010c00

0800074c <weigh>:

int weigh()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  int32_t  samples = 5;
 8000756:	2305      	movs	r3, #5
 8000758:	617b      	str	r3, [r7, #20]
  int milligram;
  float g;
  float coefficient;
  for(uint16_t i=0 ; i<samples ; i++)
 800075a:	2300      	movs	r3, #0
 800075c:	837b      	strh	r3, [r7, #26]
 800075e:	e008      	b.n	8000772 <weigh+0x26>
  {
      total += getHX711();
 8000760:	f7ff ff90 	bl	8000684 <getHX711>
 8000764:	4602      	mov	r2, r0
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	4413      	add	r3, r2
 800076a:	61fb      	str	r3, [r7, #28]
  for(uint16_t i=0 ; i<samples ; i++)
 800076c:	8b7b      	ldrh	r3, [r7, #26]
 800076e:	3301      	adds	r3, #1
 8000770:	837b      	strh	r3, [r7, #26]
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	429a      	cmp	r2, r3
 8000778:	dcf2      	bgt.n	8000760 <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000782:	613b      	str	r3, [r7, #16]
  coefficient = knownOriginal / knownHX711;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <weigh+0x98>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <weigh+0x9c>)
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe9e 	bl	80004d0 <__aeabi_fdiv>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
  milligram = (int)(average-tare)*coefficient;
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <weigh+0xa0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd8d 	bl	80002c0 <__aeabi_i2f>
 80007a6:	4603      	mov	r3, r0
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fddc 	bl	8000368 <__aeabi_fmul>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff28 	bl	8000608 <__aeabi_f2iz>
 80007b8:	4603      	mov	r3, r0
 80007ba:	60bb      	str	r3, [r7, #8]
  g = milligram/1000;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4a0c      	ldr	r2, [pc, #48]	@ (80007f0 <weigh+0xa4>)
 80007c0:	fb82 1203 	smull	r1, r2, r2, r3
 80007c4:	1192      	asrs	r2, r2, #6
 80007c6:	17db      	asrs	r3, r3, #31
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd78 	bl	80002c0 <__aeabi_i2f>
 80007d0:	4603      	mov	r3, r0
 80007d2:	607b      	str	r3, [r7, #4]
  return g;
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff17 	bl	8000608 <__aeabi_f2iz>
 80007da:	4603      	mov	r3, r0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000004 	.word	0x20000004
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000000 	.word	0x20000000
 80007f0:	10624dd3 	.word	0x10624dd3

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fce3 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f861 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 f91f 	bl	8000a44 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000806:	f000 f8d1 	bl	80009ac <MX_TIM2_Init>
  MX_I2C1_Init();
 800080a:	f000 f8a1 	bl	8000950 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start(&htim2);
 800080e:	4826      	ldr	r0, [pc, #152]	@ (80008a8 <main+0xb4>)
 8000810:	f002 f8ee 	bl	80029f0 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800081a:	4824      	ldr	r0, [pc, #144]	@ (80008ac <main+0xb8>)
 800081c:	f000 ffd7 	bl	80017ce <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f000 fd31 	bl	8001288 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082c:	481f      	ldr	r0, [pc, #124]	@ (80008ac <main+0xb8>)
 800082e:	f000 ffce 	bl	80017ce <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f000 fd28 	bl	8001288 <HAL_Delay>

	ssd1306_Init();
 8000838:	f000 f99a 	bl	8000b70 <ssd1306_Init>
		// Wypełnianie ekranu kolorem czarnym (czyszczenie)
	ssd1306_Fill(0x00);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fa01 	bl	8000c44 <ssd1306_Fill>

	// Ustawienie kursora w lewym górnym rogu (0, 0)
	ssd1306_SetCursor(20, 30);
 8000842:	211e      	movs	r1, #30
 8000844:	2014      	movs	r0, #20
 8000846:	f000 fb57 	bl	8000ef8 <ssd1306_SetCursor>

	// Wybór czcionki (możesz użyć innych czcionek, np. `Font_7x10`)
	ssd1306_WriteString("Hello STM32!", Font_7x10, 0x01);
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <main+0xbc>)
 800084c:	2201      	movs	r2, #1
 800084e:	9200      	str	r2, [sp, #0]
 8000850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000852:	4818      	ldr	r0, [pc, #96]	@ (80008b4 <main+0xc0>)
 8000854:	f000 fb2a 	bl	8000eac <ssd1306_WriteString>

	// Aktualizacja ekranu, aby zmiany się wyświetliły
	ssd1306_UpdateScreen();
 8000858:	f000 fa0c 	bl	8000c74 <ssd1306_UpdateScreen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
	  ssd1306_Fill(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 f9f1 	bl	8000c44 <ssd1306_Fill>
	  	  weight = (-1)*weigh(); // in milligram
 8000862:	f7ff ff73 	bl	800074c <weigh>
 8000866:	4603      	mov	r3, r0
 8000868:	425b      	negs	r3, r3
 800086a:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <main+0xc4>)
 800086c:	6013      	str	r3, [r2, #0]
	      /* USER CODE BEGIN 3 */
	  	  char weight_str[10];  // Tablica na tekst z wynikiem
	  	      sprintf(weight_str, "%d g", weight);  // Zmienna 'weight' w formacie "xxx mg"
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <main+0xc4>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4911      	ldr	r1, [pc, #68]	@ (80008bc <main+0xc8>)
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fb2e 	bl	8002ed8 <siprintf>

	  	      // Ustawienie kursora w odpowiedniej pozycji na ekranie
	  	      ssd1306_SetCursor(0, 0);  // Możesz dostosować pozycję
 800087c:	2100      	movs	r1, #0
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fb3a 	bl	8000ef8 <ssd1306_SetCursor>
	  	      ssd1306_WriteString("Value  ", Font_7x10, 0x01);
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <main+0xbc>)
 8000886:	2201      	movs	r2, #1
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <main+0xcc>)
 800088e:	f000 fb0d 	bl	8000eac <ssd1306_WriteString>
	  	      // Wyświetlenie wyniku na ekranie
	  	      ssd1306_WriteString(weight_str, Font_7x10, 0x01);  // Pokaż wynik w mg
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <main+0xbc>)
 8000894:	1d38      	adds	r0, r7, #4
 8000896:	2201      	movs	r2, #1
 8000898:	9200      	str	r2, [sp, #0]
 800089a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800089c:	f000 fb06 	bl	8000eac <ssd1306_WriteString>

	  	      // Aktualizacja ekranu
	  	      ssd1306_UpdateScreen();
 80008a0:	f000 f9e8 	bl	8000c74 <ssd1306_UpdateScreen>
  {
 80008a4:	bf00      	nop
 80008a6:	e7d9      	b.n	800085c <main+0x68>
 80008a8:	200000d8 	.word	0x200000d8
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	08003fdc 	.word	0x08003fdc
 80008b4:	08003850 	.word	0x08003850
 80008b8:	20000120 	.word	0x20000120
 80008bc:	08003860 	.word	0x08003860
 80008c0:	08003868 	.word	0x08003868

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	@ 0x40
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2228      	movs	r2, #40	@ 0x28
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fb20 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000902:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fc23 	bl	8002158 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000918:	f000 f8ec 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fe90 	bl	800265c <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000942:	f000 f8d7 	bl	8000af4 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3740      	adds	r7, #64	@ 0x40
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f000 ff37 	bl	8001800 <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 f8ac 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000084 	.word	0x20000084
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009d2:	2247      	movs	r2, #71	@ 0x47
 80009d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f0:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <MX_TIM2_Init+0x94>)
 80009f2:	f001 ffad 	bl	8002950 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009fc:	f000 f87a 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <MX_TIM2_Init+0x94>)
 8000a0e:	f002 f839 	bl	8002a84 <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a18:	f000 f86c 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_TIM2_Init+0x94>)
 8000a2a:	f002 f9f7 	bl	8002e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a34:	f000 f85e 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000d8 	.word	0x200000d8

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b24      	ldr	r3, [pc, #144]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a23      	ldr	r2, [pc, #140]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_GPIO_Init+0xa8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa6:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <MX_GPIO_Init+0xac>)
 8000aa8:	f000 fe91 	bl	80017ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <MX_GPIO_Init+0xac>)
 8000ac2:	f000 fce9 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_GPIO_Init+0xac>)
 8000ae0:	f000 fcda 	bl	8001498 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010c00 	.word	0x40010c00

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2200      	movs	r2, #0
 8000b28:	2178      	movs	r1, #120	@ 0x78
 8000b2a:	4803      	ldr	r0, [pc, #12]	@ (8000b38 <ssd1306_WriteCommand+0x2c>)
 8000b2c:	f000 ffac 	bl	8001a88 <HAL_I2C_Mem_Write>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000084 	.word	0x20000084

08000b3c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af04      	add	r7, sp, #16
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b4e:	9202      	str	r2, [sp, #8]
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2301      	movs	r3, #1
 8000b58:	2240      	movs	r2, #64	@ 0x40
 8000b5a:	2178      	movs	r1, #120	@ 0x78
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <ssd1306_WriteData+0x30>)
 8000b5e:	f000 ff93 	bl	8001a88 <HAL_I2C_Mem_Write>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000084 	.word	0x20000084

08000b70 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b74:	f7ff ffc4 	bl	8000b00 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b78:	2064      	movs	r0, #100	@ 0x64
 8000b7a:	f000 fb85 	bl	8001288 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f9e8 	bl	8000f54 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b84:	2020      	movs	r0, #32
 8000b86:	f7ff ffc1 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff ffbe 	bl	8000b0c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b90:	20b0      	movs	r0, #176	@ 0xb0
 8000b92:	f7ff ffbb 	bl	8000b0c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b96:	20c8      	movs	r0, #200	@ 0xc8
 8000b98:	f7ff ffb8 	bl	8000b0c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff ffb5 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ba2:	2010      	movs	r0, #16
 8000ba4:	f7ff ffb2 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ba8:	2040      	movs	r0, #64	@ 0x40
 8000baa:	f7ff ffaf 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bae:	20ff      	movs	r0, #255	@ 0xff
 8000bb0:	f000 f9bc 	bl	8000f2c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bb4:	20a1      	movs	r0, #161	@ 0xa1
 8000bb6:	f7ff ffa9 	bl	8000b0c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bba:	20a6      	movs	r0, #166	@ 0xa6
 8000bbc:	f7ff ffa6 	bl	8000b0c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bc0:	20a8      	movs	r0, #168	@ 0xa8
 8000bc2:	f7ff ffa3 	bl	8000b0c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bc6:	203f      	movs	r0, #63	@ 0x3f
 8000bc8:	f7ff ffa0 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bcc:	20a4      	movs	r0, #164	@ 0xa4
 8000bce:	f7ff ff9d 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bd2:	20d3      	movs	r0, #211	@ 0xd3
 8000bd4:	f7ff ff9a 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ff97 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bde:	20d5      	movs	r0, #213	@ 0xd5
 8000be0:	f7ff ff94 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000be4:	20f0      	movs	r0, #240	@ 0xf0
 8000be6:	f7ff ff91 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bea:	20d9      	movs	r0, #217	@ 0xd9
 8000bec:	f7ff ff8e 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bf0:	2022      	movs	r0, #34	@ 0x22
 8000bf2:	f7ff ff8b 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bf6:	20da      	movs	r0, #218	@ 0xda
 8000bf8:	f7ff ff88 	bl	8000b0c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f7ff ff85 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c02:	20db      	movs	r0, #219	@ 0xdb
 8000c04:	f7ff ff82 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c08:	2020      	movs	r0, #32
 8000c0a:	f7ff ff7f 	bl	8000b0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c0e:	208d      	movs	r0, #141	@ 0x8d
 8000c10:	f7ff ff7c 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c14:	2014      	movs	r0, #20
 8000c16:	f7ff ff79 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f000 f99a 	bl	8000f54 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f80f 	bl	8000c44 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c26:	f000 f825 	bl	8000c74 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <ssd1306_Init+0xd0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <ssd1306_Init+0xd0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c36:	4b02      	ldr	r3, [pc, #8]	@ (8000c40 <ssd1306_Init+0xd0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	711a      	strb	r2, [r3, #4]
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000534 	.word	0x20000534

08000c44 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <ssd1306_Fill+0x14>
 8000c54:	2300      	movs	r3, #0
 8000c56:	e000      	b.n	8000c5a <ssd1306_Fill+0x16>
 8000c58:	23ff      	movs	r3, #255	@ 0xff
 8000c5a:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <ssd1306_Fill+0x2c>)
 8000c62:	f002 f959 	bl	8002f18 <memset>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000124 	.word	0x20000124

08000c74 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	e01a      	b.n	8000cb6 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	3b50      	subs	r3, #80	@ 0x50
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff40 	bl	8000b0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff ff3d 	bl	8000b0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c92:	2010      	movs	r0, #16
 8000c94:	f7ff ff3a 	bl	8000b0c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <ssd1306_UpdateScreen+0x54>)
 8000ca6:	4413      	add	r3, r2
 8000ca8:	2182      	movs	r1, #130	@ 0x82
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff46 	bl	8000b3c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b07      	cmp	r3, #7
 8000cba:	d9e1      	bls.n	8000c80 <ssd1306_UpdateScreen+0xc>
    }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000124 	.word	0x20000124

08000ccc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ccc:	b490      	push	{r4, r7}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	71bb      	strb	r3, [r7, #6]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b81      	cmp	r3, #129	@ 0x81
 8000ce2:	d849      	bhi.n	8000d78 <ssd1306_DrawPixel+0xac>
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ce8:	d846      	bhi.n	8000d78 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d120      	bne.n	8000d32 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	b2d8      	uxtb	r0, r3
 8000cf8:	4601      	mov	r1, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	019b      	lsls	r3, r3, #6
 8000cfe:	440b      	add	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <ssd1306_DrawPixel+0xb8>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	b25a      	sxtb	r2, r3
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b25c      	sxtb	r4, r3
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	4601      	mov	r1, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	440b      	add	r3, r1
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2e1      	uxtb	r1, r4
 8000d2c:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <ssd1306_DrawPixel+0xb8>)
 8000d2e:	54d1      	strb	r1, [r2, r3]
 8000d30:	e023      	b.n	8000d7a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b2d8      	uxtb	r0, r3
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	019b      	lsls	r3, r3, #6
 8000d40:	440b      	add	r3, r1
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <ssd1306_DrawPixel+0xb8>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	b25a      	sxtb	r2, r3
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	2101      	movs	r1, #1
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b25c      	sxtb	r4, r3
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	4601      	mov	r1, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	440b      	add	r3, r1
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2e1      	uxtb	r1, r4
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <ssd1306_DrawPixel+0xb8>)
 8000d74:	54d1      	strb	r1, [r2, r3]
 8000d76:	e000      	b.n	8000d7a <ssd1306_DrawPixel+0xae>
        return;
 8000d78:	bf00      	nop
    }
}
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc90      	pop	{r4, r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000124 	.word	0x20000124

08000d88 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4638      	mov	r0, r7
 8000d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d96:	4623      	mov	r3, r4
 8000d98:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	d902      	bls.n	8000da6 <ssd1306_WriteChar+0x1e>
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b7e      	cmp	r3, #126	@ 0x7e
 8000da4:	d901      	bls.n	8000daa <ssd1306_WriteChar+0x22>
        return 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e079      	b.n	8000e9e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <ssd1306_WriteChar+0x34>
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	3b20      	subs	r3, #32
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	e000      	b.n	8000dbe <ssd1306_WriteChar+0x36>
 8000dbc:	783b      	ldrb	r3, [r7, #0]
 8000dbe:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000dc0:	4b39      	ldr	r3, [pc, #228]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	4413      	add	r3, r2
 8000dca:	2b82      	cmp	r3, #130	@ 0x82
 8000dcc:	dc06      	bgt.n	8000ddc <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000dce:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000dd0:	885b      	ldrh	r3, [r3, #2]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	787b      	ldrb	r3, [r7, #1]
 8000dd6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000dd8:	2b40      	cmp	r3, #64	@ 0x40
 8000dda:	dd01      	ble.n	8000de0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e05e      	b.n	8000e9e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	e04d      	b.n	8000e82 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	3b20      	subs	r3, #32
 8000dec:	7879      	ldrb	r1, [r7, #1]
 8000dee:	fb01 f303 	mul.w	r3, r1, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	440b      	add	r3, r1
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	e036      	b.n	8000e74 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d013      	beq.n	8000e3e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4413      	add	r3, r2
 8000e22:	b2d8      	uxtb	r0, r3
 8000e24:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000e26:	885b      	ldrh	r3, [r3, #2]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff ff48 	bl	8000ccc <ssd1306_DrawPixel>
 8000e3c:	e017      	b.n	8000e6e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2d8      	uxtb	r0, r3
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000e4e:	885b      	ldrh	r3, [r3, #2]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b2d9      	uxtb	r1, r3
 8000e5a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf0c      	ite	eq
 8000e62:	2301      	moveq	r3, #1
 8000e64:	2300      	movne	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f7ff ff2f 	bl	8000ccc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d3c4      	bcc.n	8000e06 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	787b      	ldrb	r3, [r7, #1]
 8000e84:	461a      	mov	r2, r3
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d3ac      	bcc.n	8000de6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <ssd1306_WriteChar+0x120>)
 8000e9a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000534 	.word	0x20000534

08000eac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000eba:	e013      	b.n	8000ee4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	7818      	ldrb	r0, [r3, #0]
 8000ec0:	7e3b      	ldrb	r3, [r7, #24]
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec8:	f7ff ff5e 	bl	8000d88 <ssd1306_WriteChar>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d002      	beq.n	8000ede <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	e008      	b.n	8000ef0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e7      	bne.n	8000ebc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x+1;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <ssd1306_SetCursor+0x30>)
 8000f12:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <ssd1306_SetCursor+0x30>)
 8000f1a:	805a      	strh	r2, [r3, #2]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000534 	.word	0x20000534

08000f2c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f36:	2381      	movs	r3, #129	@ 0x81
 8000f38:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fde5 	bl	8000b0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fde1 	bl	8000b0c <ssd1306_WriteCommand>
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f64:	23af      	movs	r3, #175	@ 0xaf
 8000f66:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <ssd1306_SetDisplayOn+0x38>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	715a      	strb	r2, [r3, #5]
 8000f6e:	e004      	b.n	8000f7a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f70:	23ae      	movs	r3, #174	@ 0xae
 8000f72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <ssd1306_SetDisplayOn+0x38>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fdc5 	bl	8000b0c <ssd1306_WriteCommand>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000534 	.word	0x20000534

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <HAL_I2C_MspInit+0x70>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d123      	bne.n	800105c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_I2C_MspInit+0x74>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a13      	ldr	r2, [pc, #76]	@ (8001068 <HAL_I2C_MspInit+0x74>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_I2C_MspInit+0x74>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102c:	23c0      	movs	r3, #192	@ 0xc0
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001030:	2312      	movs	r3, #18
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <HAL_I2C_MspInit+0x78>)
 8001040:	f000 fa2a 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <HAL_I2C_MspInit+0x74>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_I2C_MspInit+0x74>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800104e:	61d3      	str	r3, [r2, #28]
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_I2C_MspInit+0x74>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010c00 	.word	0x40010c00

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001080:	d10b      	bne.n	800109a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_TIM_Base_MspInit+0x34>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_TIM_Base_MspInit+0x34>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_TIM_Base_MspInit+0x34>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f8aa 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	@ (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f001 fefa 	bl	8002f28 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20005000 	.word	0x20005000
 8001160:	00000400 	.word	0x00000400
 8001164:	2000053c 	.word	0x2000053c
 8001168:	20000690 	.word	0x20000690

0800116c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff fff8 	bl	800116c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117e:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001180:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001194:	4c09      	ldr	r4, [pc, #36]	@ (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f001 fec7 	bl	8002f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff fb25 	bl	80007f4 <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011b4:	08004050 	.word	0x08004050
  ldr r2, =_sbss
 80011b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011bc:	2000068c 	.word	0x2000068c

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_Init+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <HAL_Init+0x28>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f92b 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fed6 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f935 	bl	800147e <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800122c:	f000 f90b 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000000c 	.word	0x2000000c
 8001248:	20000014 	.word	0x20000014
 800124c:	20000010 	.word	0x20000010

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	@ (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000014 	.word	0x20000014
 8001270:	20000540 	.word	0x20000540

08001274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	@ (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000540 	.word	0x20000540

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff fff0 	bl	8001274 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffe0 	bl	8001274 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000014 	.word	0x20000014

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001410:	f7ff ff90 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	@ (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff49 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff5e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff90 	bl	8001388 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5f 	bl	8001334 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb0 	bl	80013ec <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	@ 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e169      	b.n	8001780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8158 	bne.w	800177a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a9a      	ldr	r2, [pc, #616]	@ (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d05e      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014d4:	4a98      	ldr	r2, [pc, #608]	@ (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d875      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014da:	4a98      	ldr	r2, [pc, #608]	@ (800173c <HAL_GPIO_Init+0x2a4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d058      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014e0:	4a96      	ldr	r2, [pc, #600]	@ (800173c <HAL_GPIO_Init+0x2a4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d86f      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014e6:	4a96      	ldr	r2, [pc, #600]	@ (8001740 <HAL_GPIO_Init+0x2a8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d052      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014ec:	4a94      	ldr	r2, [pc, #592]	@ (8001740 <HAL_GPIO_Init+0x2a8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d869      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014f2:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <HAL_GPIO_Init+0x2ac>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d04c      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014f8:	4a92      	ldr	r2, [pc, #584]	@ (8001744 <HAL_GPIO_Init+0x2ac>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d863      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014fe:	4a92      	ldr	r2, [pc, #584]	@ (8001748 <HAL_GPIO_Init+0x2b0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d046      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 8001504:	4a90      	ldr	r2, [pc, #576]	@ (8001748 <HAL_GPIO_Init+0x2b0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d85d      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d82a      	bhi.n	8001564 <HAL_GPIO_Init+0xcc>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d859      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 8001512:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <HAL_GPIO_Init+0x80>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001593 	.word	0x08001593
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c7 	.word	0x080015c7
 800152c:	080015c7 	.word	0x080015c7
 8001530:	080015c7 	.word	0x080015c7
 8001534:	080015c7 	.word	0x080015c7
 8001538:	080015c7 	.word	0x080015c7
 800153c:	080015c7 	.word	0x080015c7
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015c7 	.word	0x080015c7
 8001548:	080015c7 	.word	0x080015c7
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015c7 	.word	0x080015c7
 8001554:	080015c7 	.word	0x080015c7
 8001558:	080015c7 	.word	0x080015c7
 800155c:	08001575 	.word	0x08001575
 8001560:	08001589 	.word	0x08001589
 8001564:	4a79      	ldr	r2, [pc, #484]	@ (800174c <HAL_GPIO_Init+0x2b4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e029      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e024      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01f      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e01a      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e013      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          break;
 80015c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	@ 0xff
 80015cc:	d801      	bhi.n	80015d2 <HAL_GPIO_Init+0x13a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_Init+0x13e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	@ 0xff
 80015dc:	d802      	bhi.n	80015e4 <HAL_GPIO_Init+0x14c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x152>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	3b08      	subs	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	210f      	movs	r1, #15
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80b1 	beq.w	800177a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	4b4d      	ldr	r3, [pc, #308]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a4c      	ldr	r2, [pc, #304]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001630:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <HAL_GPIO_Init+0x2bc>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a40      	ldr	r2, [pc, #256]	@ (8001758 <HAL_GPIO_Init+0x2c0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <HAL_GPIO_Init+0x1ec>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3f      	ldr	r2, [pc, #252]	@ (800175c <HAL_GPIO_Init+0x2c4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_GPIO_Init+0x1e8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3e      	ldr	r2, [pc, #248]	@ (8001760 <HAL_GPIO_Init+0x2c8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x1e4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3d      	ldr	r2, [pc, #244]	@ (8001764 <HAL_GPIO_Init+0x2cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_Init+0x1e0>
 8001674:	2303      	movs	r3, #3
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001678:	2304      	movs	r3, #4
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001684:	2300      	movs	r3, #0
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001696:	492f      	ldr	r1, [pc, #188]	@ (8001754 <HAL_GPIO_Init+0x2bc>)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	492c      	ldr	r1, [pc, #176]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4928      	ldr	r1, [pc, #160]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4922      	ldr	r1, [pc, #136]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	491e      	ldr	r1, [pc, #120]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4918      	ldr	r1, [pc, #96]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4914      	ldr	r1, [pc, #80]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d021      	beq.n	800176c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e021      	b.n	800177a <HAL_GPIO_Init+0x2e2>
 8001736:	bf00      	nop
 8001738:	10320000 	.word	0x10320000
 800173c:	10310000 	.word	0x10310000
 8001740:	10220000 	.word	0x10220000
 8001744:	10210000 	.word	0x10210000
 8001748:	10120000 	.word	0x10120000
 800174c:	10110000 	.word	0x10110000
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000
 8001764:	40011400 	.word	0x40011400
 8001768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_GPIO_Init+0x304>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	43db      	mvns	r3, r3
 8001774:	4909      	ldr	r1, [pc, #36]	@ (800179c <HAL_GPIO_Init+0x304>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f ae8e 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	372c      	adds	r7, #44	@ 0x2c
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017de:	787b      	ldrb	r3, [r7, #1]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ea:	e003      	b.n	80017f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	041a      	lsls	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	611a      	str	r2, [r3, #16]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e12b      	b.n	8001a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fbe4 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2224      	movs	r2, #36	@ 0x24
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001864:	f001 f842 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8001868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a81      	ldr	r2, [pc, #516]	@ (8001a74 <HAL_I2C_Init+0x274>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d807      	bhi.n	8001884 <HAL_I2C_Init+0x84>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a80      	ldr	r2, [pc, #512]	@ (8001a78 <HAL_I2C_Init+0x278>)
 8001878:	4293      	cmp	r3, r2
 800187a:	bf94      	ite	ls
 800187c:	2301      	movls	r3, #1
 800187e:	2300      	movhi	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	e006      	b.n	8001892 <HAL_I2C_Init+0x92>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4a7d      	ldr	r2, [pc, #500]	@ (8001a7c <HAL_I2C_Init+0x27c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	bf94      	ite	ls
 800188c:	2301      	movls	r3, #1
 800188e:	2300      	movhi	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0e7      	b.n	8001a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a78      	ldr	r2, [pc, #480]	@ (8001a80 <HAL_I2C_Init+0x280>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9b      	lsrs	r3, r3, #18
 80018a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a74 <HAL_I2C_Init+0x274>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d802      	bhi.n	80018d4 <HAL_I2C_Init+0xd4>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	e009      	b.n	80018e8 <HAL_I2C_Init+0xe8>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a69      	ldr	r2, [pc, #420]	@ (8001a84 <HAL_I2C_Init+0x284>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	3301      	adds	r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	495c      	ldr	r1, [pc, #368]	@ (8001a74 <HAL_I2C_Init+0x274>)
 8001904:	428b      	cmp	r3, r1
 8001906:	d819      	bhi.n	800193c <HAL_I2C_Init+0x13c>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e59      	subs	r1, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fbb1 f3f3 	udiv	r3, r1, r3
 8001916:	1c59      	adds	r1, r3, #1
 8001918:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800191c:	400b      	ands	r3, r1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <HAL_I2C_Init+0x138>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1e59      	subs	r1, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001936:	e051      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 8001938:	2304      	movs	r3, #4
 800193a:	e04f      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <HAL_I2C_Init+0x168>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1e58      	subs	r0, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	440b      	add	r3, r1
 8001952:	fbb0 f3f3 	udiv	r3, r0, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	e012      	b.n	800198e <HAL_I2C_Init+0x18e>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Init+0x196>
 8001992:	2301      	movs	r3, #1
 8001994:	e022      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10e      	bne.n	80019bc <HAL_I2C_Init+0x1bc>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e58      	subs	r0, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ba:	e00f      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	0099      	lsls	r1, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	6809      	ldr	r1, [r1, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6911      	ldr	r1, [r2, #16]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68d2      	ldr	r2, [r2, #12]
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	000186a0 	.word	0x000186a0
 8001a78:	001e847f 	.word	0x001e847f
 8001a7c:	003d08ff 	.word	0x003d08ff
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	10624dd3 	.word	0x10624dd3

08001a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	817b      	strh	r3, [r7, #10]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	813b      	strh	r3, [r7, #8]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aa2:	f7ff fbe7 	bl	8001274 <HAL_GetTick>
 8001aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	f040 80d9 	bne.w	8001c68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2319      	movs	r3, #25
 8001abc:	2201      	movs	r2, #1
 8001abe:	496d      	ldr	r1, [pc, #436]	@ (8001c74 <HAL_I2C_Mem_Write+0x1ec>)
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f971 	bl	8001da8 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0cc      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_I2C_Mem_Write+0x56>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0c5      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d007      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2221      	movs	r2, #33	@ 0x21
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2240      	movs	r2, #64	@ 0x40
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a4d      	ldr	r2, [pc, #308]	@ (8001c78 <HAL_I2C_Mem_Write+0x1f0>)
 8001b44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b46:	88f8      	ldrh	r0, [r7, #6]
 8001b48:	893a      	ldrh	r2, [r7, #8]
 8001b4a:	8979      	ldrh	r1, [r7, #10]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4603      	mov	r3, r0
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f890 	bl	8001c7c <I2C_RequestMemoryWrite>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d052      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e081      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fa36 	bl	8001fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_I2C_Mem_Write+0x180>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1aa      	bne.n	8001b66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fa29 	bl	800206c <I2C_WaitOnBTFFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00d      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d107      	bne.n	8001c38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e016      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	00100002 	.word	0x00100002
 8001c78:	ffff0000 	.word	0xffff0000

08001c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	817b      	strh	r3, [r7, #10]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	813b      	strh	r3, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f878 	bl	8001da8 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ccc:	d103      	bne.n	8001cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e05f      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	492d      	ldr	r1, [pc, #180]	@ (8001da4 <I2C_RequestMemoryWrite+0x128>)
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f8d3 	bl	8001e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e04c      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f95e 	bl	8001fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d107      	bne.n	8001d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02b      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d48:	893b      	ldrh	r3, [r7, #8]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	e021      	b.n	8001d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d54:	893b      	ldrh	r3, [r7, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d64:	6a39      	ldr	r1, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f938 	bl	8001fdc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d107      	bne.n	8001d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e005      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	00010002 	.word	0x00010002

08001da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db8:	e048      	b.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dc0:	d044      	beq.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7ff fa57 	bl	8001274 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d139      	bne.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	0c1b      	lsrs	r3, r3, #16
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10d      	bne.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	43da      	mvns	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4013      	ands	r3, r2
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	e00c      	b.n	8001e18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d116      	bne.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e023      	b.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	0c1b      	lsrs	r3, r3, #16
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10d      	bne.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4013      	ands	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	e00c      	b.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d093      	beq.n	8001dba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eaa:	e071      	b.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d123      	bne.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ed4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e067      	b.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f0a:	d041      	beq.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0c:	f7ff f9b2 	bl	8001274 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d302      	bcc.n	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d136      	bne.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10c      	bne.n	8001f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e00b      	b.n	8001f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4013      	ands	r3, r2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e021      	b.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10c      	bne.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e00b      	b.n	8001fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f af6d 	bne.w	8001eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fe8:	e034      	b.n	8002054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f886 	bl	80020fc <I2C_IsAcknowledgeFailed>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e034      	b.n	8002064 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002000:	d028      	beq.n	8002054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002002:	f7ff f937 	bl	8001274 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	d302      	bcc.n	8002018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11d      	bne.n	8002054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	2b80      	cmp	r3, #128	@ 0x80
 8002024:	d016      	beq.n	8002054 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e007      	b.n	8002064 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	2b80      	cmp	r3, #128	@ 0x80
 8002060:	d1c3      	bne.n	8001fea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002078:	e034      	b.n	80020e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f83e 	bl	80020fc <I2C_IsAcknowledgeFailed>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e034      	b.n	80020f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002090:	d028      	beq.n	80020e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7ff f8ef 	bl	8001274 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11d      	bne.n	80020e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d016      	beq.n	80020e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e007      	b.n	80020f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d1c3      	bne.n	800207a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002112:	d11b      	bne.n	800214c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800211c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e272      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8087 	beq.w	8002286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b92      	ldr	r3, [pc, #584]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00c      	beq.n	800219e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002184:	4b8f      	ldr	r3, [pc, #572]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5e>
 8002190:	4b8c      	ldr	r3, [pc, #560]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219c:	d10b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219e:	4b89      	ldr	r3, [pc, #548]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06c      	beq.n	8002284 <HAL_RCC_OscConfig+0x12c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d168      	bne.n	8002284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e24c      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x76>
 80021c0:	4b80      	ldr	r3, [pc, #512]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7f      	ldr	r2, [pc, #508]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e02e      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x98>
 80021d6:	4b7b      	ldr	r3, [pc, #492]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7a      	ldr	r2, [pc, #488]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b78      	ldr	r3, [pc, #480]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a77      	ldr	r2, [pc, #476]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0xbc>
 80021fa:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a71      	ldr	r2, [pc, #452]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6f      	ldr	r3, [pc, #444]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 8002214:	4b6b      	ldr	r3, [pc, #428]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6a      	ldr	r2, [pc, #424]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b68      	ldr	r3, [pc, #416]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a67      	ldr	r2, [pc, #412]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff f81e 	bl	8001274 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff f81a 	bl	8001274 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e200      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b5d      	ldr	r3, [pc, #372]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xe4>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff f80a 	bl	8001274 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff f806 	bl	8001274 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1ec      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x10c>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002292:	4b4c      	ldr	r3, [pc, #304]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229e:	4b49      	ldr	r3, [pc, #292]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x18c>
 80022aa:	4b46      	ldr	r3, [pc, #280]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c0      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4939      	ldr	r1, [pc, #228]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe ffbf 	bl	8001274 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fa:	f7fe ffbb 	bl	8001274 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a1      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4927      	ldr	r1, [pc, #156]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe ff9e 	bl	8001274 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe ff9a 	bl	8001274 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e180      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d03a      	beq.n	80023dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d019      	beq.n	80023a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_RCC_OscConfig+0x274>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7fe ff7e 	bl	8001274 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe ff7a 	bl	8001274 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e160      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800239a:	2001      	movs	r0, #1
 800239c:	f000 faba 	bl	8002914 <RCC_Delay>
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_RCC_OscConfig+0x274>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7fe ff64 	bl	8001274 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ae:	e00f      	b.n	80023d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b0:	f7fe ff60 	bl	8001274 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e146      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	42420000 	.word	0x42420000
 80023cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b92      	ldr	r3, [pc, #584]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e9      	bne.n	80023b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a6 	beq.w	8002536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b8b      	ldr	r3, [pc, #556]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b88      	ldr	r3, [pc, #544]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a87      	ldr	r2, [pc, #540]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b85      	ldr	r3, [pc, #532]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b82      	ldr	r3, [pc, #520]	@ (8002620 <HAL_RCC_OscConfig+0x4c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b7f      	ldr	r3, [pc, #508]	@ (8002620 <HAL_RCC_OscConfig+0x4c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7e      	ldr	r2, [pc, #504]	@ (8002620 <HAL_RCC_OscConfig+0x4c8>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe ff21 	bl	8001274 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe ff1d 	bl	8001274 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	@ 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e103      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b75      	ldr	r3, [pc, #468]	@ (8002620 <HAL_RCC_OscConfig+0x4c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x312>
 800245c:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a6e      	ldr	r2, [pc, #440]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e02d      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x334>
 8002472:	4b6a      	ldr	r3, [pc, #424]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a69      	ldr	r2, [pc, #420]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b67      	ldr	r3, [pc, #412]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a66      	ldr	r2, [pc, #408]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	e01c      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d10c      	bne.n	80024ae <HAL_RCC_OscConfig+0x356>
 8002494:	4b61      	ldr	r3, [pc, #388]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a60      	ldr	r2, [pc, #384]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	4b5e      	ldr	r3, [pc, #376]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a5d      	ldr	r2, [pc, #372]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e00b      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 80024ae:	4b5b      	ldr	r3, [pc, #364]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a5a      	ldr	r2, [pc, #360]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	4b58      	ldr	r3, [pc, #352]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a57      	ldr	r2, [pc, #348]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d015      	beq.n	80024fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fed1 	bl	8001274 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fecd 	bl	8001274 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0b1      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ee      	beq.n	80024d6 <HAL_RCC_OscConfig+0x37e>
 80024f8:	e014      	b.n	8002524 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe febb 	bl	8001274 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe feb7 	bl	8001274 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e09b      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	4b40      	ldr	r3, [pc, #256]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ee      	bne.n	8002502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a3b      	ldr	r2, [pc, #236]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8087 	beq.w	800264e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b36      	ldr	r3, [pc, #216]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d061      	beq.n	8002610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d146      	bne.n	80025e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002554:	4b33      	ldr	r3, [pc, #204]	@ (8002624 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fe8b 	bl	8001274 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fe87 	bl	8001274 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e06d      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	4b29      	ldr	r3, [pc, #164]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4921      	ldr	r1, [pc, #132]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259c:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a19      	ldr	r1, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	430b      	orrs	r3, r1
 80025ae:	491b      	ldr	r1, [pc, #108]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe5b 	bl	8001274 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fe57 	bl	8001274 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e03d      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x46a>
 80025e0:	e035      	b.n	800264e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_RCC_OscConfig+0x4cc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fe44 	bl	8001274 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fe40 	bl	8001274 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e026      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x498>
 800260e:	e01e      	b.n	800264e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d107      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e019      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_OscConfig+0x500>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0d0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b6a      	ldr	r3, [pc, #424]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b67      	ldr	r3, [pc, #412]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4965      	ldr	r1, [pc, #404]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d040      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b41      	ldr	r3, [pc, #260]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e073      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06b      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4936      	ldr	r1, [pc, #216]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7fe fd92 	bl	8001274 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fd8e 	bl	8001274 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e053      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b27      	ldr	r3, [pc, #156]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d210      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4922      	ldr	r1, [pc, #136]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	@ (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fcf0 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	08003fe8 	.word	0x08003fe8
 8002828:	2000000c 	.word	0x2000000c
 800282c:	20000010 	.word	0x20000010

08002830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d002      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x30>
 800285a:	2b08      	cmp	r3, #8
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x36>
 800285e:	e027      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	613b      	str	r3, [r7, #16]
      break;
 8002864:	e027      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0c9b      	lsrs	r3, r3, #18
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0c5b      	lsrs	r3, r3, #17
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	4a11      	ldr	r2, [pc, #68]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002892:	fb03 f202 	mul.w	r2, r3, r2
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e004      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	613b      	str	r3, [r7, #16]
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028b2:	613b      	str	r3, [r7, #16]
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	693b      	ldr	r3, [r7, #16]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	007a1200 	.word	0x007a1200
 80028cc:	08004000 	.word	0x08004000
 80028d0:	08004010 	.word	0x08004010
 80028d4:	003d0900 	.word	0x003d0900

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b02      	ldr	r3, [pc, #8]	@ (80028e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	2000000c 	.word	0x2000000c

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff2 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08003ff8 	.word	0x08003ff8

08002914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <RCC_Delay+0x34>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <RCC_Delay+0x38>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0a5b      	lsrs	r3, r3, #9
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002930:	bf00      	nop
  }
  while (Delay --);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	60fa      	str	r2, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f9      	bne.n	8002930 <RCC_Delay+0x1c>
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	2000000c 	.word	0x2000000c
 800294c:	10624dd3 	.word	0x10624dd3

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e041      	b.n	80029e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb7a 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 f940 	bl	8002c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a18      	ldr	r2, [pc, #96]	@ (8002a78 <HAL_TIM_Base_Start+0x88>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_TIM_Base_Start+0x48>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a22:	d009      	beq.n	8002a38 <HAL_TIM_Base_Start+0x48>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a14      	ldr	r2, [pc, #80]	@ (8002a7c <HAL_TIM_Base_Start+0x8c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIM_Base_Start+0x48>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <HAL_TIM_Base_Start+0x90>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d111      	bne.n	8002a5c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d010      	beq.n	8002a6c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	e007      	b.n	8002a6c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800

08002a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0b4      	b.n	8002c0a <HAL_TIM_ConfigClockSource+0x186>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad8:	d03e      	beq.n	8002b58 <HAL_TIM_ConfigClockSource+0xd4>
 8002ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ade:	f200 8087 	bhi.w	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae6:	f000 8086 	beq.w	8002bf6 <HAL_TIM_ConfigClockSource+0x172>
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aee:	d87f      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b70      	cmp	r3, #112	@ 0x70
 8002af2:	d01a      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0xa6>
 8002af4:	2b70      	cmp	r3, #112	@ 0x70
 8002af6:	d87b      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b60      	cmp	r3, #96	@ 0x60
 8002afa:	d050      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x11a>
 8002afc:	2b60      	cmp	r3, #96	@ 0x60
 8002afe:	d877      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b50      	cmp	r3, #80	@ 0x50
 8002b02:	d03c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0xfa>
 8002b04:	2b50      	cmp	r3, #80	@ 0x50
 8002b06:	d873      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b40      	cmp	r3, #64	@ 0x40
 8002b0a:	d058      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x13a>
 8002b0c:	2b40      	cmp	r3, #64	@ 0x40
 8002b0e:	d86f      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b30      	cmp	r3, #48	@ 0x30
 8002b12:	d064      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b14:	2b30      	cmp	r3, #48	@ 0x30
 8002b16:	d86b      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d060      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d867      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05c      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d05a      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b28:	e062      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b3a:	f000 f950 	bl	8002dde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	609a      	str	r2, [r3, #8]
      break;
 8002b56:	e04f      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b68:	f000 f939 	bl	8002dde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b7a:	609a      	str	r2, [r3, #8]
      break;
 8002b7c:	e03c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f000 f8b0 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2150      	movs	r1, #80	@ 0x50
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f907 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b9c:	e02c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 f8ce 	bl	8002d4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2160      	movs	r1, #96	@ 0x60
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f8f7 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e01c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 f890 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2140      	movs	r1, #64	@ 0x40
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f8e7 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e00c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f000 f8de 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bee:	e003      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e000      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <TIM_Base_SetConfig+0xd4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cec <TIM_Base_SetConfig+0xd8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a22      	ldr	r2, [pc, #136]	@ (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce8 <TIM_Base_SetConfig+0xd4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <TIM_Base_SetConfig+0xd8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d103      	bne.n	8002cbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800

08002cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 030a 	bic.w	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	609a      	str	r2, [r3, #8]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e046      	b.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e80:	d009      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10c      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800

08002ed8 <siprintf>:
 8002ed8:	b40e      	push	{r1, r2, r3}
 8002eda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ede:	b500      	push	{lr}
 8002ee0:	b09c      	sub	sp, #112	@ 0x70
 8002ee2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ee4:	9002      	str	r0, [sp, #8]
 8002ee6:	9006      	str	r0, [sp, #24]
 8002ee8:	9107      	str	r1, [sp, #28]
 8002eea:	9104      	str	r1, [sp, #16]
 8002eec:	4808      	ldr	r0, [pc, #32]	@ (8002f10 <siprintf+0x38>)
 8002eee:	4909      	ldr	r1, [pc, #36]	@ (8002f14 <siprintf+0x3c>)
 8002ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ef4:	9105      	str	r1, [sp, #20]
 8002ef6:	6800      	ldr	r0, [r0, #0]
 8002ef8:	a902      	add	r1, sp, #8
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	f000 f9a0 	bl	8003240 <_svfiprintf_r>
 8002f00:	2200      	movs	r2, #0
 8002f02:	9b02      	ldr	r3, [sp, #8]
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	b01c      	add	sp, #112	@ 0x70
 8002f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f0c:	b003      	add	sp, #12
 8002f0e:	4770      	bx	lr
 8002f10:	20000018 	.word	0x20000018
 8002f14:	ffff0208 	.word	0xffff0208

08002f18 <memset>:
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4402      	add	r2, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <__errno>:
 8002f28:	4b01      	ldr	r3, [pc, #4]	@ (8002f30 <__errno+0x8>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000018 	.word	0x20000018

08002f34 <__libc_init_array>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	2600      	movs	r6, #0
 8002f38:	4d0c      	ldr	r5, [pc, #48]	@ (8002f6c <__libc_init_array+0x38>)
 8002f3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002f70 <__libc_init_array+0x3c>)
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	42a6      	cmp	r6, r4
 8002f42:	d109      	bne.n	8002f58 <__libc_init_array+0x24>
 8002f44:	f000 fc78 	bl	8003838 <_init>
 8002f48:	2600      	movs	r6, #0
 8002f4a:	4d0a      	ldr	r5, [pc, #40]	@ (8002f74 <__libc_init_array+0x40>)
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f78 <__libc_init_array+0x44>)
 8002f4e:	1b64      	subs	r4, r4, r5
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	42a6      	cmp	r6, r4
 8002f54:	d105      	bne.n	8002f62 <__libc_init_array+0x2e>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5c:	4798      	blx	r3
 8002f5e:	3601      	adds	r6, #1
 8002f60:	e7ee      	b.n	8002f40 <__libc_init_array+0xc>
 8002f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f66:	4798      	blx	r3
 8002f68:	3601      	adds	r6, #1
 8002f6a:	e7f2      	b.n	8002f52 <__libc_init_array+0x1e>
 8002f6c:	08004048 	.word	0x08004048
 8002f70:	08004048 	.word	0x08004048
 8002f74:	08004048 	.word	0x08004048
 8002f78:	0800404c 	.word	0x0800404c

08002f7c <__retarget_lock_acquire_recursive>:
 8002f7c:	4770      	bx	lr

08002f7e <__retarget_lock_release_recursive>:
 8002f7e:	4770      	bx	lr

08002f80 <memcpy>:
 8002f80:	440a      	add	r2, r1
 8002f82:	4291      	cmp	r1, r2
 8002f84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002f88:	d100      	bne.n	8002f8c <memcpy+0xc>
 8002f8a:	4770      	bx	lr
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f92:	4291      	cmp	r1, r2
 8002f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f98:	d1f9      	bne.n	8002f8e <memcpy+0xe>
 8002f9a:	bd10      	pop	{r4, pc}

08002f9c <_free_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d040      	beq.n	8003026 <_free_r+0x8a>
 8002fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa8:	1f0c      	subs	r4, r1, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfb8      	it	lt
 8002fae:	18e4      	addlt	r4, r4, r3
 8002fb0:	f000 f8de 	bl	8003170 <__malloc_lock>
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <_free_r+0x8c>)
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	b933      	cbnz	r3, 8002fc8 <_free_r+0x2c>
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	6014      	str	r4, [r2, #0]
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc4:	f000 b8da 	b.w	800317c <__malloc_unlock>
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	d908      	bls.n	8002fde <_free_r+0x42>
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	1821      	adds	r1, r4, r0
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	bf01      	itttt	eq
 8002fd4:	6819      	ldreq	r1, [r3, #0]
 8002fd6:	685b      	ldreq	r3, [r3, #4]
 8002fd8:	1809      	addeq	r1, r1, r0
 8002fda:	6021      	streq	r1, [r4, #0]
 8002fdc:	e7ed      	b.n	8002fba <_free_r+0x1e>
 8002fde:	461a      	mov	r2, r3
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b10b      	cbz	r3, 8002fe8 <_free_r+0x4c>
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	d9fa      	bls.n	8002fde <_free_r+0x42>
 8002fe8:	6811      	ldr	r1, [r2, #0]
 8002fea:	1850      	adds	r0, r2, r1
 8002fec:	42a0      	cmp	r0, r4
 8002fee:	d10b      	bne.n	8003008 <_free_r+0x6c>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	4401      	add	r1, r0
 8002ff4:	1850      	adds	r0, r2, r1
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	d1e0      	bne.n	8002fbe <_free_r+0x22>
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4408      	add	r0, r1
 8003002:	6010      	str	r0, [r2, #0]
 8003004:	6053      	str	r3, [r2, #4]
 8003006:	e7da      	b.n	8002fbe <_free_r+0x22>
 8003008:	d902      	bls.n	8003010 <_free_r+0x74>
 800300a:	230c      	movs	r3, #12
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	e7d6      	b.n	8002fbe <_free_r+0x22>
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	1821      	adds	r1, r4, r0
 8003014:	428b      	cmp	r3, r1
 8003016:	bf01      	itttt	eq
 8003018:	6819      	ldreq	r1, [r3, #0]
 800301a:	685b      	ldreq	r3, [r3, #4]
 800301c:	1809      	addeq	r1, r1, r0
 800301e:	6021      	streq	r1, [r4, #0]
 8003020:	6063      	str	r3, [r4, #4]
 8003022:	6054      	str	r4, [r2, #4]
 8003024:	e7cb      	b.n	8002fbe <_free_r+0x22>
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000688 	.word	0x20000688

0800302c <sbrk_aligned>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4e0f      	ldr	r6, [pc, #60]	@ (800306c <sbrk_aligned+0x40>)
 8003030:	460c      	mov	r4, r1
 8003032:	6831      	ldr	r1, [r6, #0]
 8003034:	4605      	mov	r5, r0
 8003036:	b911      	cbnz	r1, 800303e <sbrk_aligned+0x12>
 8003038:	f000 fbaa 	bl	8003790 <_sbrk_r>
 800303c:	6030      	str	r0, [r6, #0]
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f000 fba5 	bl	8003790 <_sbrk_r>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d103      	bne.n	8003052 <sbrk_aligned+0x26>
 800304a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800304e:	4620      	mov	r0, r4
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d0f8      	beq.n	800304e <sbrk_aligned+0x22>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f000 fb96 	bl	8003790 <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d1f2      	bne.n	800304e <sbrk_aligned+0x22>
 8003068:	e7ef      	b.n	800304a <sbrk_aligned+0x1e>
 800306a:	bf00      	nop
 800306c:	20000684 	.word	0x20000684

08003070 <_malloc_r>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	1ccd      	adds	r5, r1, #3
 8003076:	f025 0503 	bic.w	r5, r5, #3
 800307a:	3508      	adds	r5, #8
 800307c:	2d0c      	cmp	r5, #12
 800307e:	bf38      	it	cc
 8003080:	250c      	movcc	r5, #12
 8003082:	2d00      	cmp	r5, #0
 8003084:	4606      	mov	r6, r0
 8003086:	db01      	blt.n	800308c <_malloc_r+0x1c>
 8003088:	42a9      	cmp	r1, r5
 800308a:	d904      	bls.n	8003096 <_malloc_r+0x26>
 800308c:	230c      	movs	r3, #12
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	2000      	movs	r0, #0
 8003092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800316c <_malloc_r+0xfc>
 800309a:	f000 f869 	bl	8003170 <__malloc_lock>
 800309e:	f8d8 3000 	ldr.w	r3, [r8]
 80030a2:	461c      	mov	r4, r3
 80030a4:	bb44      	cbnz	r4, 80030f8 <_malloc_r+0x88>
 80030a6:	4629      	mov	r1, r5
 80030a8:	4630      	mov	r0, r6
 80030aa:	f7ff ffbf 	bl	800302c <sbrk_aligned>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	4604      	mov	r4, r0
 80030b2:	d158      	bne.n	8003166 <_malloc_r+0xf6>
 80030b4:	f8d8 4000 	ldr.w	r4, [r8]
 80030b8:	4627      	mov	r7, r4
 80030ba:	2f00      	cmp	r7, #0
 80030bc:	d143      	bne.n	8003146 <_malloc_r+0xd6>
 80030be:	2c00      	cmp	r4, #0
 80030c0:	d04b      	beq.n	800315a <_malloc_r+0xea>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	4639      	mov	r1, r7
 80030c6:	4630      	mov	r0, r6
 80030c8:	eb04 0903 	add.w	r9, r4, r3
 80030cc:	f000 fb60 	bl	8003790 <_sbrk_r>
 80030d0:	4581      	cmp	r9, r0
 80030d2:	d142      	bne.n	800315a <_malloc_r+0xea>
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	4630      	mov	r0, r6
 80030d8:	1a6d      	subs	r5, r5, r1
 80030da:	4629      	mov	r1, r5
 80030dc:	f7ff ffa6 	bl	800302c <sbrk_aligned>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d03a      	beq.n	800315a <_malloc_r+0xea>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	442b      	add	r3, r5
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	f8d8 3000 	ldr.w	r3, [r8]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	bb62      	cbnz	r2, 800314c <_malloc_r+0xdc>
 80030f2:	f8c8 7000 	str.w	r7, [r8]
 80030f6:	e00f      	b.n	8003118 <_malloc_r+0xa8>
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	1b52      	subs	r2, r2, r5
 80030fc:	d420      	bmi.n	8003140 <_malloc_r+0xd0>
 80030fe:	2a0b      	cmp	r2, #11
 8003100:	d917      	bls.n	8003132 <_malloc_r+0xc2>
 8003102:	1961      	adds	r1, r4, r5
 8003104:	42a3      	cmp	r3, r4
 8003106:	6025      	str	r5, [r4, #0]
 8003108:	bf18      	it	ne
 800310a:	6059      	strne	r1, [r3, #4]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	bf08      	it	eq
 8003110:	f8c8 1000 	streq.w	r1, [r8]
 8003114:	5162      	str	r2, [r4, r5]
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	4630      	mov	r0, r6
 800311a:	f000 f82f 	bl	800317c <__malloc_unlock>
 800311e:	f104 000b 	add.w	r0, r4, #11
 8003122:	1d23      	adds	r3, r4, #4
 8003124:	f020 0007 	bic.w	r0, r0, #7
 8003128:	1ac2      	subs	r2, r0, r3
 800312a:	bf1c      	itt	ne
 800312c:	1a1b      	subne	r3, r3, r0
 800312e:	50a3      	strne	r3, [r4, r2]
 8003130:	e7af      	b.n	8003092 <_malloc_r+0x22>
 8003132:	6862      	ldr	r2, [r4, #4]
 8003134:	42a3      	cmp	r3, r4
 8003136:	bf0c      	ite	eq
 8003138:	f8c8 2000 	streq.w	r2, [r8]
 800313c:	605a      	strne	r2, [r3, #4]
 800313e:	e7eb      	b.n	8003118 <_malloc_r+0xa8>
 8003140:	4623      	mov	r3, r4
 8003142:	6864      	ldr	r4, [r4, #4]
 8003144:	e7ae      	b.n	80030a4 <_malloc_r+0x34>
 8003146:	463c      	mov	r4, r7
 8003148:	687f      	ldr	r7, [r7, #4]
 800314a:	e7b6      	b.n	80030ba <_malloc_r+0x4a>
 800314c:	461a      	mov	r2, r3
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	42a3      	cmp	r3, r4
 8003152:	d1fb      	bne.n	800314c <_malloc_r+0xdc>
 8003154:	2300      	movs	r3, #0
 8003156:	6053      	str	r3, [r2, #4]
 8003158:	e7de      	b.n	8003118 <_malloc_r+0xa8>
 800315a:	230c      	movs	r3, #12
 800315c:	4630      	mov	r0, r6
 800315e:	6033      	str	r3, [r6, #0]
 8003160:	f000 f80c 	bl	800317c <__malloc_unlock>
 8003164:	e794      	b.n	8003090 <_malloc_r+0x20>
 8003166:	6005      	str	r5, [r0, #0]
 8003168:	e7d6      	b.n	8003118 <_malloc_r+0xa8>
 800316a:	bf00      	nop
 800316c:	20000688 	.word	0x20000688

08003170 <__malloc_lock>:
 8003170:	4801      	ldr	r0, [pc, #4]	@ (8003178 <__malloc_lock+0x8>)
 8003172:	f7ff bf03 	b.w	8002f7c <__retarget_lock_acquire_recursive>
 8003176:	bf00      	nop
 8003178:	20000680 	.word	0x20000680

0800317c <__malloc_unlock>:
 800317c:	4801      	ldr	r0, [pc, #4]	@ (8003184 <__malloc_unlock+0x8>)
 800317e:	f7ff befe 	b.w	8002f7e <__retarget_lock_release_recursive>
 8003182:	bf00      	nop
 8003184:	20000680 	.word	0x20000680

08003188 <__ssputs_r>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	461f      	mov	r7, r3
 800318e:	688e      	ldr	r6, [r1, #8]
 8003190:	4682      	mov	sl, r0
 8003192:	42be      	cmp	r6, r7
 8003194:	460c      	mov	r4, r1
 8003196:	4690      	mov	r8, r2
 8003198:	680b      	ldr	r3, [r1, #0]
 800319a:	d82d      	bhi.n	80031f8 <__ssputs_r+0x70>
 800319c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031a4:	d026      	beq.n	80031f4 <__ssputs_r+0x6c>
 80031a6:	6965      	ldr	r5, [r4, #20]
 80031a8:	6909      	ldr	r1, [r1, #16]
 80031aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ae:	eba3 0901 	sub.w	r9, r3, r1
 80031b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b6:	1c7b      	adds	r3, r7, #1
 80031b8:	444b      	add	r3, r9
 80031ba:	106d      	asrs	r5, r5, #1
 80031bc:	429d      	cmp	r5, r3
 80031be:	bf38      	it	cc
 80031c0:	461d      	movcc	r5, r3
 80031c2:	0553      	lsls	r3, r2, #21
 80031c4:	d527      	bpl.n	8003216 <__ssputs_r+0x8e>
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7ff ff52 	bl	8003070 <_malloc_r>
 80031cc:	4606      	mov	r6, r0
 80031ce:	b360      	cbz	r0, 800322a <__ssputs_r+0xa2>
 80031d0:	464a      	mov	r2, r9
 80031d2:	6921      	ldr	r1, [r4, #16]
 80031d4:	f7ff fed4 	bl	8002f80 <memcpy>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e2:	81a3      	strh	r3, [r4, #12]
 80031e4:	6126      	str	r6, [r4, #16]
 80031e6:	444e      	add	r6, r9
 80031e8:	6026      	str	r6, [r4, #0]
 80031ea:	463e      	mov	r6, r7
 80031ec:	6165      	str	r5, [r4, #20]
 80031ee:	eba5 0509 	sub.w	r5, r5, r9
 80031f2:	60a5      	str	r5, [r4, #8]
 80031f4:	42be      	cmp	r6, r7
 80031f6:	d900      	bls.n	80031fa <__ssputs_r+0x72>
 80031f8:	463e      	mov	r6, r7
 80031fa:	4632      	mov	r2, r6
 80031fc:	4641      	mov	r1, r8
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	f000 faac 	bl	800375c <memmove>
 8003204:	2000      	movs	r0, #0
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	1b9b      	subs	r3, r3, r6
 800320a:	60a3      	str	r3, [r4, #8]
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	4433      	add	r3, r6
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003216:	462a      	mov	r2, r5
 8003218:	f000 fad8 	bl	80037cc <_realloc_r>
 800321c:	4606      	mov	r6, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	d1e0      	bne.n	80031e4 <__ssputs_r+0x5c>
 8003222:	4650      	mov	r0, sl
 8003224:	6921      	ldr	r1, [r4, #16]
 8003226:	f7ff feb9 	bl	8002f9c <_free_r>
 800322a:	230c      	movs	r3, #12
 800322c:	f8ca 3000 	str.w	r3, [sl]
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800323a:	81a3      	strh	r3, [r4, #12]
 800323c:	e7e9      	b.n	8003212 <__ssputs_r+0x8a>
	...

08003240 <_svfiprintf_r>:
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4698      	mov	r8, r3
 8003246:	898b      	ldrh	r3, [r1, #12]
 8003248:	4607      	mov	r7, r0
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	460d      	mov	r5, r1
 800324e:	4614      	mov	r4, r2
 8003250:	b09d      	sub	sp, #116	@ 0x74
 8003252:	d510      	bpl.n	8003276 <_svfiprintf_r+0x36>
 8003254:	690b      	ldr	r3, [r1, #16]
 8003256:	b973      	cbnz	r3, 8003276 <_svfiprintf_r+0x36>
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	f7ff ff09 	bl	8003070 <_malloc_r>
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	6128      	str	r0, [r5, #16]
 8003262:	b930      	cbnz	r0, 8003272 <_svfiprintf_r+0x32>
 8003264:	230c      	movs	r3, #12
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800326c:	b01d      	add	sp, #116	@ 0x74
 800326e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003272:	2340      	movs	r3, #64	@ 0x40
 8003274:	616b      	str	r3, [r5, #20]
 8003276:	2300      	movs	r3, #0
 8003278:	9309      	str	r3, [sp, #36]	@ 0x24
 800327a:	2320      	movs	r3, #32
 800327c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003280:	2330      	movs	r3, #48	@ 0x30
 8003282:	f04f 0901 	mov.w	r9, #1
 8003286:	f8cd 800c 	str.w	r8, [sp, #12]
 800328a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003424 <_svfiprintf_r+0x1e4>
 800328e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003292:	4623      	mov	r3, r4
 8003294:	469a      	mov	sl, r3
 8003296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800329a:	b10a      	cbz	r2, 80032a0 <_svfiprintf_r+0x60>
 800329c:	2a25      	cmp	r2, #37	@ 0x25
 800329e:	d1f9      	bne.n	8003294 <_svfiprintf_r+0x54>
 80032a0:	ebba 0b04 	subs.w	fp, sl, r4
 80032a4:	d00b      	beq.n	80032be <_svfiprintf_r+0x7e>
 80032a6:	465b      	mov	r3, fp
 80032a8:	4622      	mov	r2, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	4638      	mov	r0, r7
 80032ae:	f7ff ff6b 	bl	8003188 <__ssputs_r>
 80032b2:	3001      	adds	r0, #1
 80032b4:	f000 80a7 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032ba:	445a      	add	r2, fp
 80032bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80032be:	f89a 3000 	ldrb.w	r3, [sl]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 809f 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032d2:	f10a 0a01 	add.w	sl, sl, #1
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032de:	931a      	str	r3, [sp, #104]	@ 0x68
 80032e0:	4654      	mov	r4, sl
 80032e2:	2205      	movs	r2, #5
 80032e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e8:	484e      	ldr	r0, [pc, #312]	@ (8003424 <_svfiprintf_r+0x1e4>)
 80032ea:	f000 fa61 	bl	80037b0 <memchr>
 80032ee:	9a04      	ldr	r2, [sp, #16]
 80032f0:	b9d8      	cbnz	r0, 800332a <_svfiprintf_r+0xea>
 80032f2:	06d0      	lsls	r0, r2, #27
 80032f4:	bf44      	itt	mi
 80032f6:	2320      	movmi	r3, #32
 80032f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032fc:	0711      	lsls	r1, r2, #28
 80032fe:	bf44      	itt	mi
 8003300:	232b      	movmi	r3, #43	@ 0x2b
 8003302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003306:	f89a 3000 	ldrb.w	r3, [sl]
 800330a:	2b2a      	cmp	r3, #42	@ 0x2a
 800330c:	d015      	beq.n	800333a <_svfiprintf_r+0xfa>
 800330e:	4654      	mov	r4, sl
 8003310:	2000      	movs	r0, #0
 8003312:	f04f 0c0a 	mov.w	ip, #10
 8003316:	9a07      	ldr	r2, [sp, #28]
 8003318:	4621      	mov	r1, r4
 800331a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331e:	3b30      	subs	r3, #48	@ 0x30
 8003320:	2b09      	cmp	r3, #9
 8003322:	d94b      	bls.n	80033bc <_svfiprintf_r+0x17c>
 8003324:	b1b0      	cbz	r0, 8003354 <_svfiprintf_r+0x114>
 8003326:	9207      	str	r2, [sp, #28]
 8003328:	e014      	b.n	8003354 <_svfiprintf_r+0x114>
 800332a:	eba0 0308 	sub.w	r3, r0, r8
 800332e:	fa09 f303 	lsl.w	r3, r9, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	46a2      	mov	sl, r4
 8003336:	9304      	str	r3, [sp, #16]
 8003338:	e7d2      	b.n	80032e0 <_svfiprintf_r+0xa0>
 800333a:	9b03      	ldr	r3, [sp, #12]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9103      	str	r1, [sp, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbb      	ittet	lt
 8003346:	425b      	neglt	r3, r3
 8003348:	f042 0202 	orrlt.w	r2, r2, #2
 800334c:	9307      	strge	r3, [sp, #28]
 800334e:	9307      	strlt	r3, [sp, #28]
 8003350:	bfb8      	it	lt
 8003352:	9204      	strlt	r2, [sp, #16]
 8003354:	7823      	ldrb	r3, [r4, #0]
 8003356:	2b2e      	cmp	r3, #46	@ 0x2e
 8003358:	d10a      	bne.n	8003370 <_svfiprintf_r+0x130>
 800335a:	7863      	ldrb	r3, [r4, #1]
 800335c:	2b2a      	cmp	r3, #42	@ 0x2a
 800335e:	d132      	bne.n	80033c6 <_svfiprintf_r+0x186>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	3402      	adds	r4, #2
 8003364:	1d1a      	adds	r2, r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	9203      	str	r2, [sp, #12]
 800336a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800336e:	9305      	str	r3, [sp, #20]
 8003370:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003428 <_svfiprintf_r+0x1e8>
 8003374:	2203      	movs	r2, #3
 8003376:	4650      	mov	r0, sl
 8003378:	7821      	ldrb	r1, [r4, #0]
 800337a:	f000 fa19 	bl	80037b0 <memchr>
 800337e:	b138      	cbz	r0, 8003390 <_svfiprintf_r+0x150>
 8003380:	2240      	movs	r2, #64	@ 0x40
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	eba0 000a 	sub.w	r0, r0, sl
 8003388:	4082      	lsls	r2, r0
 800338a:	4313      	orrs	r3, r2
 800338c:	3401      	adds	r4, #1
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003394:	2206      	movs	r2, #6
 8003396:	4825      	ldr	r0, [pc, #148]	@ (800342c <_svfiprintf_r+0x1ec>)
 8003398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800339c:	f000 fa08 	bl	80037b0 <memchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d036      	beq.n	8003412 <_svfiprintf_r+0x1d2>
 80033a4:	4b22      	ldr	r3, [pc, #136]	@ (8003430 <_svfiprintf_r+0x1f0>)
 80033a6:	bb1b      	cbnz	r3, 80033f0 <_svfiprintf_r+0x1b0>
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	3307      	adds	r3, #7
 80033ac:	f023 0307 	bic.w	r3, r3, #7
 80033b0:	3308      	adds	r3, #8
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033b6:	4433      	add	r3, r6
 80033b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80033ba:	e76a      	b.n	8003292 <_svfiprintf_r+0x52>
 80033bc:	460c      	mov	r4, r1
 80033be:	2001      	movs	r0, #1
 80033c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c4:	e7a8      	b.n	8003318 <_svfiprintf_r+0xd8>
 80033c6:	2300      	movs	r3, #0
 80033c8:	f04f 0c0a 	mov.w	ip, #10
 80033cc:	4619      	mov	r1, r3
 80033ce:	3401      	adds	r4, #1
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	4620      	mov	r0, r4
 80033d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d8:	3a30      	subs	r2, #48	@ 0x30
 80033da:	2a09      	cmp	r2, #9
 80033dc:	d903      	bls.n	80033e6 <_svfiprintf_r+0x1a6>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c6      	beq.n	8003370 <_svfiprintf_r+0x130>
 80033e2:	9105      	str	r1, [sp, #20]
 80033e4:	e7c4      	b.n	8003370 <_svfiprintf_r+0x130>
 80033e6:	4604      	mov	r4, r0
 80033e8:	2301      	movs	r3, #1
 80033ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ee:	e7f0      	b.n	80033d2 <_svfiprintf_r+0x192>
 80033f0:	ab03      	add	r3, sp, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462a      	mov	r2, r5
 80033f6:	4638      	mov	r0, r7
 80033f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003434 <_svfiprintf_r+0x1f4>)
 80033fa:	a904      	add	r1, sp, #16
 80033fc:	f3af 8000 	nop.w
 8003400:	1c42      	adds	r2, r0, #1
 8003402:	4606      	mov	r6, r0
 8003404:	d1d6      	bne.n	80033b4 <_svfiprintf_r+0x174>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af2d 	bmi.w	8003268 <_svfiprintf_r+0x28>
 800340e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003410:	e72c      	b.n	800326c <_svfiprintf_r+0x2c>
 8003412:	ab03      	add	r3, sp, #12
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462a      	mov	r2, r5
 8003418:	4638      	mov	r0, r7
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <_svfiprintf_r+0x1f4>)
 800341c:	a904      	add	r1, sp, #16
 800341e:	f000 f87d 	bl	800351c <_printf_i>
 8003422:	e7ed      	b.n	8003400 <_svfiprintf_r+0x1c0>
 8003424:	08004012 	.word	0x08004012
 8003428:	08004018 	.word	0x08004018
 800342c:	0800401c 	.word	0x0800401c
 8003430:	00000000 	.word	0x00000000
 8003434:	08003189 	.word	0x08003189

08003438 <_printf_common>:
 8003438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4616      	mov	r6, r2
 800343e:	4698      	mov	r8, r3
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	4607      	mov	r7, r0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfb8      	it	lt
 800344a:	4613      	movlt	r3, r2
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003452:	460c      	mov	r4, r1
 8003454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003458:	b10a      	cbz	r2, 800345e <_printf_common+0x26>
 800345a:	3301      	adds	r3, #1
 800345c:	6033      	str	r3, [r6, #0]
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	0699      	lsls	r1, r3, #26
 8003462:	bf42      	ittt	mi
 8003464:	6833      	ldrmi	r3, [r6, #0]
 8003466:	3302      	addmi	r3, #2
 8003468:	6033      	strmi	r3, [r6, #0]
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	f015 0506 	ands.w	r5, r5, #6
 8003470:	d106      	bne.n	8003480 <_printf_common+0x48>
 8003472:	f104 0a19 	add.w	sl, r4, #25
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	6832      	ldr	r2, [r6, #0]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	42ab      	cmp	r3, r5
 800347e:	dc2b      	bgt.n	80034d8 <_printf_common+0xa0>
 8003480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	3b00      	subs	r3, #0
 8003488:	bf18      	it	ne
 800348a:	2301      	movne	r3, #1
 800348c:	0692      	lsls	r2, r2, #26
 800348e:	d430      	bmi.n	80034f2 <_printf_common+0xba>
 8003490:	4641      	mov	r1, r8
 8003492:	4638      	mov	r0, r7
 8003494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003498:	47c8      	blx	r9
 800349a:	3001      	adds	r0, #1
 800349c:	d023      	beq.n	80034e6 <_printf_common+0xae>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf14      	ite	ne
 80034aa:	2500      	movne	r5, #0
 80034ac:	6833      	ldreq	r3, [r6, #0]
 80034ae:	f04f 0600 	mov.w	r6, #0
 80034b2:	bf08      	it	eq
 80034b4:	68e5      	ldreq	r5, [r4, #12]
 80034b6:	f104 041a 	add.w	r4, r4, #26
 80034ba:	bf08      	it	eq
 80034bc:	1aed      	subeq	r5, r5, r3
 80034be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034c2:	bf08      	it	eq
 80034c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bfc4      	itt	gt
 80034cc:	1a9b      	subgt	r3, r3, r2
 80034ce:	18ed      	addgt	r5, r5, r3
 80034d0:	42b5      	cmp	r5, r6
 80034d2:	d11a      	bne.n	800350a <_printf_common+0xd2>
 80034d4:	2000      	movs	r0, #0
 80034d6:	e008      	b.n	80034ea <_printf_common+0xb2>
 80034d8:	2301      	movs	r3, #1
 80034da:	4652      	mov	r2, sl
 80034dc:	4641      	mov	r1, r8
 80034de:	4638      	mov	r0, r7
 80034e0:	47c8      	blx	r9
 80034e2:	3001      	adds	r0, #1
 80034e4:	d103      	bne.n	80034ee <_printf_common+0xb6>
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ee:	3501      	adds	r5, #1
 80034f0:	e7c1      	b.n	8003476 <_printf_common+0x3e>
 80034f2:	2030      	movs	r0, #48	@ 0x30
 80034f4:	18e1      	adds	r1, r4, r3
 80034f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003500:	4422      	add	r2, r4
 8003502:	3302      	adds	r3, #2
 8003504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003508:	e7c2      	b.n	8003490 <_printf_common+0x58>
 800350a:	2301      	movs	r3, #1
 800350c:	4622      	mov	r2, r4
 800350e:	4641      	mov	r1, r8
 8003510:	4638      	mov	r0, r7
 8003512:	47c8      	blx	r9
 8003514:	3001      	adds	r0, #1
 8003516:	d0e6      	beq.n	80034e6 <_printf_common+0xae>
 8003518:	3601      	adds	r6, #1
 800351a:	e7d9      	b.n	80034d0 <_printf_common+0x98>

0800351c <_printf_i>:
 800351c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	7e0f      	ldrb	r7, [r1, #24]
 8003522:	4691      	mov	r9, r2
 8003524:	2f78      	cmp	r7, #120	@ 0x78
 8003526:	4680      	mov	r8, r0
 8003528:	460c      	mov	r4, r1
 800352a:	469a      	mov	sl, r3
 800352c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800352e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003532:	d807      	bhi.n	8003544 <_printf_i+0x28>
 8003534:	2f62      	cmp	r7, #98	@ 0x62
 8003536:	d80a      	bhi.n	800354e <_printf_i+0x32>
 8003538:	2f00      	cmp	r7, #0
 800353a:	f000 80d3 	beq.w	80036e4 <_printf_i+0x1c8>
 800353e:	2f58      	cmp	r7, #88	@ 0x58
 8003540:	f000 80ba 	beq.w	80036b8 <_printf_i+0x19c>
 8003544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800354c:	e03a      	b.n	80035c4 <_printf_i+0xa8>
 800354e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003552:	2b15      	cmp	r3, #21
 8003554:	d8f6      	bhi.n	8003544 <_printf_i+0x28>
 8003556:	a101      	add	r1, pc, #4	@ (adr r1, 800355c <_printf_i+0x40>)
 8003558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035c9 	.word	0x080035c9
 8003564:	08003545 	.word	0x08003545
 8003568:	08003545 	.word	0x08003545
 800356c:	08003545 	.word	0x08003545
 8003570:	08003545 	.word	0x08003545
 8003574:	080035c9 	.word	0x080035c9
 8003578:	08003545 	.word	0x08003545
 800357c:	08003545 	.word	0x08003545
 8003580:	08003545 	.word	0x08003545
 8003584:	08003545 	.word	0x08003545
 8003588:	080036cb 	.word	0x080036cb
 800358c:	080035f3 	.word	0x080035f3
 8003590:	08003685 	.word	0x08003685
 8003594:	08003545 	.word	0x08003545
 8003598:	08003545 	.word	0x08003545
 800359c:	080036ed 	.word	0x080036ed
 80035a0:	08003545 	.word	0x08003545
 80035a4:	080035f3 	.word	0x080035f3
 80035a8:	08003545 	.word	0x08003545
 80035ac:	08003545 	.word	0x08003545
 80035b0:	0800368d 	.word	0x0800368d
 80035b4:	6833      	ldr	r3, [r6, #0]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6032      	str	r2, [r6, #0]
 80035bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035c4:	2301      	movs	r3, #1
 80035c6:	e09e      	b.n	8003706 <_printf_i+0x1ea>
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	6820      	ldr	r0, [r4, #0]
 80035cc:	1d19      	adds	r1, r3, #4
 80035ce:	6031      	str	r1, [r6, #0]
 80035d0:	0606      	lsls	r6, r0, #24
 80035d2:	d501      	bpl.n	80035d8 <_printf_i+0xbc>
 80035d4:	681d      	ldr	r5, [r3, #0]
 80035d6:	e003      	b.n	80035e0 <_printf_i+0xc4>
 80035d8:	0645      	lsls	r5, r0, #25
 80035da:	d5fb      	bpl.n	80035d4 <_printf_i+0xb8>
 80035dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	da03      	bge.n	80035ec <_printf_i+0xd0>
 80035e4:	232d      	movs	r3, #45	@ 0x2d
 80035e6:	426d      	negs	r5, r5
 80035e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ec:	230a      	movs	r3, #10
 80035ee:	4859      	ldr	r0, [pc, #356]	@ (8003754 <_printf_i+0x238>)
 80035f0:	e011      	b.n	8003616 <_printf_i+0xfa>
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	0608      	lsls	r0, r1, #24
 80035f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035fc:	d402      	bmi.n	8003604 <_printf_i+0xe8>
 80035fe:	0649      	lsls	r1, r1, #25
 8003600:	bf48      	it	mi
 8003602:	b2ad      	uxthmi	r5, r5
 8003604:	2f6f      	cmp	r7, #111	@ 0x6f
 8003606:	6033      	str	r3, [r6, #0]
 8003608:	bf14      	ite	ne
 800360a:	230a      	movne	r3, #10
 800360c:	2308      	moveq	r3, #8
 800360e:	4851      	ldr	r0, [pc, #324]	@ (8003754 <_printf_i+0x238>)
 8003610:	2100      	movs	r1, #0
 8003612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003616:	6866      	ldr	r6, [r4, #4]
 8003618:	2e00      	cmp	r6, #0
 800361a:	bfa8      	it	ge
 800361c:	6821      	ldrge	r1, [r4, #0]
 800361e:	60a6      	str	r6, [r4, #8]
 8003620:	bfa4      	itt	ge
 8003622:	f021 0104 	bicge.w	r1, r1, #4
 8003626:	6021      	strge	r1, [r4, #0]
 8003628:	b90d      	cbnz	r5, 800362e <_printf_i+0x112>
 800362a:	2e00      	cmp	r6, #0
 800362c:	d04b      	beq.n	80036c6 <_printf_i+0x1aa>
 800362e:	4616      	mov	r6, r2
 8003630:	fbb5 f1f3 	udiv	r1, r5, r3
 8003634:	fb03 5711 	mls	r7, r3, r1, r5
 8003638:	5dc7      	ldrb	r7, [r0, r7]
 800363a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800363e:	462f      	mov	r7, r5
 8003640:	42bb      	cmp	r3, r7
 8003642:	460d      	mov	r5, r1
 8003644:	d9f4      	bls.n	8003630 <_printf_i+0x114>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d10b      	bne.n	8003662 <_printf_i+0x146>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	07df      	lsls	r7, r3, #31
 800364e:	d508      	bpl.n	8003662 <_printf_i+0x146>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	6861      	ldr	r1, [r4, #4]
 8003654:	4299      	cmp	r1, r3
 8003656:	bfde      	ittt	le
 8003658:	2330      	movle	r3, #48	@ 0x30
 800365a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800365e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003662:	1b92      	subs	r2, r2, r6
 8003664:	6122      	str	r2, [r4, #16]
 8003666:	464b      	mov	r3, r9
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f8cd a000 	str.w	sl, [sp]
 8003670:	aa03      	add	r2, sp, #12
 8003672:	f7ff fee1 	bl	8003438 <_printf_common>
 8003676:	3001      	adds	r0, #1
 8003678:	d14a      	bne.n	8003710 <_printf_i+0x1f4>
 800367a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800367e:	b004      	add	sp, #16
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f043 0320 	orr.w	r3, r3, #32
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	2778      	movs	r7, #120	@ 0x78
 800368e:	4832      	ldr	r0, [pc, #200]	@ (8003758 <_printf_i+0x23c>)
 8003690:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	6831      	ldr	r1, [r6, #0]
 8003698:	061f      	lsls	r7, r3, #24
 800369a:	f851 5b04 	ldr.w	r5, [r1], #4
 800369e:	d402      	bmi.n	80036a6 <_printf_i+0x18a>
 80036a0:	065f      	lsls	r7, r3, #25
 80036a2:	bf48      	it	mi
 80036a4:	b2ad      	uxthmi	r5, r5
 80036a6:	6031      	str	r1, [r6, #0]
 80036a8:	07d9      	lsls	r1, r3, #31
 80036aa:	bf44      	itt	mi
 80036ac:	f043 0320 	orrmi.w	r3, r3, #32
 80036b0:	6023      	strmi	r3, [r4, #0]
 80036b2:	b11d      	cbz	r5, 80036bc <_printf_i+0x1a0>
 80036b4:	2310      	movs	r3, #16
 80036b6:	e7ab      	b.n	8003610 <_printf_i+0xf4>
 80036b8:	4826      	ldr	r0, [pc, #152]	@ (8003754 <_printf_i+0x238>)
 80036ba:	e7e9      	b.n	8003690 <_printf_i+0x174>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	f023 0320 	bic.w	r3, r3, #32
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	e7f6      	b.n	80036b4 <_printf_i+0x198>
 80036c6:	4616      	mov	r6, r2
 80036c8:	e7bd      	b.n	8003646 <_printf_i+0x12a>
 80036ca:	6833      	ldr	r3, [r6, #0]
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	1d18      	adds	r0, r3, #4
 80036d0:	6961      	ldr	r1, [r4, #20]
 80036d2:	6030      	str	r0, [r6, #0]
 80036d4:	062e      	lsls	r6, r5, #24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	d501      	bpl.n	80036de <_printf_i+0x1c2>
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	e002      	b.n	80036e4 <_printf_i+0x1c8>
 80036de:	0668      	lsls	r0, r5, #25
 80036e0:	d5fb      	bpl.n	80036da <_printf_i+0x1be>
 80036e2:	8019      	strh	r1, [r3, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	4616      	mov	r6, r2
 80036e8:	6123      	str	r3, [r4, #16]
 80036ea:	e7bc      	b.n	8003666 <_printf_i+0x14a>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	2100      	movs	r1, #0
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	6032      	str	r2, [r6, #0]
 80036f4:	681e      	ldr	r6, [r3, #0]
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f859 	bl	80037b0 <memchr>
 80036fe:	b108      	cbz	r0, 8003704 <_printf_i+0x1e8>
 8003700:	1b80      	subs	r0, r0, r6
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	2300      	movs	r3, #0
 800370a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800370e:	e7aa      	b.n	8003666 <_printf_i+0x14a>
 8003710:	4632      	mov	r2, r6
 8003712:	4649      	mov	r1, r9
 8003714:	4640      	mov	r0, r8
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d0ad      	beq.n	800367a <_printf_i+0x15e>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	079b      	lsls	r3, r3, #30
 8003722:	d413      	bmi.n	800374c <_printf_i+0x230>
 8003724:	68e0      	ldr	r0, [r4, #12]
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	4298      	cmp	r0, r3
 800372a:	bfb8      	it	lt
 800372c:	4618      	movlt	r0, r3
 800372e:	e7a6      	b.n	800367e <_printf_i+0x162>
 8003730:	2301      	movs	r3, #1
 8003732:	4632      	mov	r2, r6
 8003734:	4649      	mov	r1, r9
 8003736:	4640      	mov	r0, r8
 8003738:	47d0      	blx	sl
 800373a:	3001      	adds	r0, #1
 800373c:	d09d      	beq.n	800367a <_printf_i+0x15e>
 800373e:	3501      	adds	r5, #1
 8003740:	68e3      	ldr	r3, [r4, #12]
 8003742:	9903      	ldr	r1, [sp, #12]
 8003744:	1a5b      	subs	r3, r3, r1
 8003746:	42ab      	cmp	r3, r5
 8003748:	dcf2      	bgt.n	8003730 <_printf_i+0x214>
 800374a:	e7eb      	b.n	8003724 <_printf_i+0x208>
 800374c:	2500      	movs	r5, #0
 800374e:	f104 0619 	add.w	r6, r4, #25
 8003752:	e7f5      	b.n	8003740 <_printf_i+0x224>
 8003754:	08004023 	.word	0x08004023
 8003758:	08004034 	.word	0x08004034

0800375c <memmove>:
 800375c:	4288      	cmp	r0, r1
 800375e:	b510      	push	{r4, lr}
 8003760:	eb01 0402 	add.w	r4, r1, r2
 8003764:	d902      	bls.n	800376c <memmove+0x10>
 8003766:	4284      	cmp	r4, r0
 8003768:	4623      	mov	r3, r4
 800376a:	d807      	bhi.n	800377c <memmove+0x20>
 800376c:	1e43      	subs	r3, r0, #1
 800376e:	42a1      	cmp	r1, r4
 8003770:	d008      	beq.n	8003784 <memmove+0x28>
 8003772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800377a:	e7f8      	b.n	800376e <memmove+0x12>
 800377c:	4601      	mov	r1, r0
 800377e:	4402      	add	r2, r0
 8003780:	428a      	cmp	r2, r1
 8003782:	d100      	bne.n	8003786 <memmove+0x2a>
 8003784:	bd10      	pop	{r4, pc}
 8003786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800378a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800378e:	e7f7      	b.n	8003780 <memmove+0x24>

08003790 <_sbrk_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	2300      	movs	r3, #0
 8003794:	4d05      	ldr	r5, [pc, #20]	@ (80037ac <_sbrk_r+0x1c>)
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd fcb0 	bl	8001100 <_sbrk>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_sbrk_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_sbrk_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	2000067c 	.word	0x2000067c

080037b0 <memchr>:
 80037b0:	4603      	mov	r3, r0
 80037b2:	b510      	push	{r4, lr}
 80037b4:	b2c9      	uxtb	r1, r1
 80037b6:	4402      	add	r2, r0
 80037b8:	4293      	cmp	r3, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	d101      	bne.n	80037c2 <memchr+0x12>
 80037be:	2000      	movs	r0, #0
 80037c0:	e003      	b.n	80037ca <memchr+0x1a>
 80037c2:	7804      	ldrb	r4, [r0, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	428c      	cmp	r4, r1
 80037c8:	d1f6      	bne.n	80037b8 <memchr+0x8>
 80037ca:	bd10      	pop	{r4, pc}

080037cc <_realloc_r>:
 80037cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d0:	4680      	mov	r8, r0
 80037d2:	4615      	mov	r5, r2
 80037d4:	460c      	mov	r4, r1
 80037d6:	b921      	cbnz	r1, 80037e2 <_realloc_r+0x16>
 80037d8:	4611      	mov	r1, r2
 80037da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037de:	f7ff bc47 	b.w	8003070 <_malloc_r>
 80037e2:	b92a      	cbnz	r2, 80037f0 <_realloc_r+0x24>
 80037e4:	f7ff fbda 	bl	8002f9c <_free_r>
 80037e8:	2400      	movs	r4, #0
 80037ea:	4620      	mov	r0, r4
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f0:	f000 f81a 	bl	8003828 <_malloc_usable_size_r>
 80037f4:	4285      	cmp	r5, r0
 80037f6:	4606      	mov	r6, r0
 80037f8:	d802      	bhi.n	8003800 <_realloc_r+0x34>
 80037fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80037fe:	d8f4      	bhi.n	80037ea <_realloc_r+0x1e>
 8003800:	4629      	mov	r1, r5
 8003802:	4640      	mov	r0, r8
 8003804:	f7ff fc34 	bl	8003070 <_malloc_r>
 8003808:	4607      	mov	r7, r0
 800380a:	2800      	cmp	r0, #0
 800380c:	d0ec      	beq.n	80037e8 <_realloc_r+0x1c>
 800380e:	42b5      	cmp	r5, r6
 8003810:	462a      	mov	r2, r5
 8003812:	4621      	mov	r1, r4
 8003814:	bf28      	it	cs
 8003816:	4632      	movcs	r2, r6
 8003818:	f7ff fbb2 	bl	8002f80 <memcpy>
 800381c:	4621      	mov	r1, r4
 800381e:	4640      	mov	r0, r8
 8003820:	f7ff fbbc 	bl	8002f9c <_free_r>
 8003824:	463c      	mov	r4, r7
 8003826:	e7e0      	b.n	80037ea <_realloc_r+0x1e>

08003828 <_malloc_usable_size_r>:
 8003828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800382c:	1f18      	subs	r0, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	bfbc      	itt	lt
 8003832:	580b      	ldrlt	r3, [r1, r0]
 8003834:	18c0      	addlt	r0, r0, r3
 8003836:	4770      	bx	lr

08003838 <_init>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	bf00      	nop
 800383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383e:	bc08      	pop	{r3}
 8003840:	469e      	mov	lr, r3
 8003842:	4770      	bx	lr

08003844 <_fini>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr
